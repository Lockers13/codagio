{"count_hash": {"fdefs": 2, "whiles": 1, "ifs": 2, "fors": 0, "assigns": 6, "augassigns": 1, "fcalls": 0, "calls": 3, "ops": 9, "elses": 2, "trys": 1, "exc_handlers": 1, "returns": 2, "level": -1, "nest_level": -1}, "nested_loops": [], "fdefs": {"fdef_1": {"name": "find_root", "class_method": false, "parent_class": null, "retval": null, "lineno": 1, "level": 0, "args": ["num", "tol"], "body": {"op_1": {"value": "num", "type": "assign", "lineno": 2, "level": 1}, "op_2": {"value": "binop", "type": "assign", "lineno": 3, "level": 1}, "while_1": {"lineno": 4, "level": 1, "body": {"test_type": "boolop", "nested": false, "nest_level": 0, "op_3": {"value": "name", "type": "augassign", "lineno": 5, "level": 2}}}, "if_1": {"lineno": 6, "level": 1, "body": {"op_4": {"value": "name", "type": "return", "lineno": 7, "level": 2}}, "test_type": "call", "elif": false}, "else_1": {"level": 1, "op_5": {"value": "unaryop", "type": "return", "lineno": 9, "level": 2}}}, "num_whiles": 1, "num_fors": 0, "num_ifs": 1, "num_ops": 5, "num_calls": 0, "num_elses": 1, "num_assigns": 2, "num_augassigns": 1, "num_trys": 0, "num_returns": 2, "ncalls": "1", "tot_time": "0.002", "cum_time": "0.002", "line_profile": {"line_2": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "root = 0.0"}, "line_3": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "step = tol/10"}, "line_4": {"hits": "1971", "time": "1.30E-03", "time_per_hit": "6.60E-07", "%time": "64.9", "contents": "while abs(num - root ** 2) >= tol and root ** 2 <= num:"}, "line_5": {"hits": "1970", "time": "7.02E-04", "time_per_hit": "3.56E-07", "%time": "35.1", "contents": "root += step"}, "line_6": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "if abs(num - root ** 2 < tol):"}, "line_7": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "return root"}}}, "fdef_2": {"name": "main", "class_method": false, "parent_class": null, "retval": null, "lineno": 11, "level": 0, "args": [], "body": {"op_6": {"value": "num", "type": "assign", "lineno": 12, "level": 1}, "op_7": {"value": "num", "type": "assign", "lineno": 13, "level": 1}, "try_1": {"lineno": 14, "level": 1, "body": {"expr": "Compare"}}, "exc_handler_1": {"op_8": {"value": "num", "type": "assign", "lineno": 17, "level": 2}, "fcall_0": {"param_caller": null, "params": ["\"hello!\""], "name": "print", "lineno": 18}}, "op_9": {"value": "call", "type": "assign", "lineno": 20, "level": 1}, "if_2": {"lineno": 21, "level": 1, "body": {"fcall_0": {"param_caller": null, "params": ["\"Approximate square root of\"", "number", "\"is:\"", "square_root"], "name": "print", "lineno": 22}}, "test_type": "compare", "elif": false}, "else_2": {"level": 1, "fcall_0": {"param_caller": null, "params": ["\"Failed to find a square root for\"", "number"], "name": "print", "lineno": 24}}}, "num_whiles": 0, "num_fors": 0, "num_ifs": 1, "num_ops": 4, "num_calls": 3, "num_elses": 1, "num_assigns": 4, "num_augassigns": 0, "num_trys": 1, "num_returns": 0, "ncalls": "1", "tot_time": "0.000", "cum_time": "0.003", "line_profile": {"line_12": {"hits": "1", "time": "3.00E-06", "time_per_hit": "3.00E-06", "%time": "0.1", "contents": "tolerance = .1"}, "line_13": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "number = 388"}, "line_14": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "try:"}, "line_15": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "3+3 == 6"}, "line_20": {"hits": "1", "time": "2.98E-03", "time_per_hit": "2.98E-03", "%time": "99.4", "contents": "square_root = find_root(number, tolerance)"}, "line_21": {"hits": "1", "time": "0.00E+00", "time_per_hit": "0.00E+00", "%time": "0.0", "contents": "if abs(number - square_root ** 2) < tolerance:"}, "line_22": {"hits": "1", "time": "1.20E-05", "time_per_hit": "1.20E-05", "%time": "0.4", "contents": "print('Approximate square root of', number, 'is:', square_root)"}}}}, "nested_fdefs": {"find_root": [], "main": []}}