Challenge - You are writing a web-app which executes user-supplied code remotely on your backend server. You need to parse the supplied script and determine if it contains any malicious function calls or imports. The relevant constraints are as follows:

Forbidden function calls: 'eval()', 'exec()', 'literal_eval()'
Forbidden absolute imports: 'os', 'sys', 'requests'
Forbidden relative imports: 'from os import system', 'from shutil import copy'

As mentioned, you must parse the supplied .py script and if there are any function calls or imports in it that violate the above constraints, then such violations must be recorded as a dictionary entry having as key the line number of the violation, and as value the violation in question, viz.:

For a forbidden function call => {lineno :  "Forbidden Call : function_name"}
For a forbidden absolute import => {lineno :  "Forbidden import : import_name"
For a forbidden relative import => {lineno :  "Forbidden import : from module_name import import_name"}

At the end, a fully populated dictionary must be returned, having as keys all line numbers of the parsed script where potentially malicious code occurs, and as values the corresponding constraint violation as a string.

We will leave it to you to determine what exceptions need handling in order to arrive at the correct output.

In the editor, you are allowed to import the following modules to complete this task:

- ast

Good luck!
