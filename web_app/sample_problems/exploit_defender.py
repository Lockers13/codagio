import ast
from json import loads as load_json

def ensure_safe(script, data):
    data = load_json(data)
    checker_funcs = {'call': process_call, 'import': process_abs_import, 'importfrom': process_rel_import}
    
    unsafe_list = []

    try:
        with open(script, 'r') as f:
            parsed_tree = ast.parse(f.read())
    except Exception as e:
        return Exception(str(e))
    
    for node in ast.walk(parsed_tree):
        try:
            if checker_funcs[type(node).__name__.lower()](node, data) == False:
                unsafe_list.append(int(node.lineno))
        except KeyError as ke:
            pass

    for unsafe in sorted(unsafe_list):
        print(unsafe)

def process_call(node, data):
    try:
        func_name = node.func.id.lower()
    except AttributeError:
        try:
            func_name = node.func.attr.lower()
        except AttributeError:
            func_name = None
    if func_name is not None:
        if func_name in data["disallowed_functions"]:
            return False
        else:
            return True
    else:
        return True

def process_abs_import(node, data):
    data_list = data['allowed_abs_imports']
    for imported in node.names:
        if imported.name not in data_list:
            return False
    return True

def process_rel_import(node, data):
    data_list = data['allowed_rel_imports'].get(node.module.lower(), None)
    if data_list is None:
        return False
    else:
        for imported in node.names:
            if imported.name not in data_list:
                return False
        return True 
